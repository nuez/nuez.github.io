<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hi, I am Teun [nuez]</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Hi, I am Teun [nuez]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to unit test methods that create and return entities in Drupal.</title>
      <link>/posts/how-to-unit-test-methods-that-create-and-return-drupal-entities/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-to-unit-test-methods-that-create-and-return-drupal-entities/</guid>
      <description>&lt;p&gt;Recently I tried to create a Unit test for a Drupal service that creates and returns entities. &lt;strong&gt;In my test I wanted to check if the field values that were used for creating those entities were matching my assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Drupal , the static &lt;code&gt;::create&lt;/code&gt; method of any content entity returns the created entity. In my unit test, checking the returned entity for values would be a hassle, as I would have to mock and stub my way through all the services that it relies on to fetch those values. More useful would be to mock the entity and let the &lt;code&gt;::create()&lt;/code&gt; method return the values that were just passed as arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â¿Does that make any sense?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me try and explain:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to build a super simple availability calendar.</title>
      <link>/posts/calendar-for-freelancers/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/calendar-for-freelancers/</guid>
      <description>&lt;p&gt;As a freelancer I like my (potential) clients to be aware of my availability. I decided to build something that would allow me to fill in my availability in Google Calendar, which would then be displayed in a nice widget on the website.&lt;/p&gt;

&lt;p&gt;The widget doesn&amp;rsquo;t need to display anything but whether or not I am available or busy on a certain day. I figured that the good ol&amp;rsquo; jQuery Datepicker would do perfectly.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s what I did.&lt;/p&gt;

&lt;h3 id=&#34;1-get-an-api-key&#34;&gt;1. Get an API Key.&lt;/h3&gt;

&lt;p&gt;When you google for accessing the Google API, most forums will point you in the direction of the OAUTH2 protocol. Using OAuth would be necessary if we wanted to access restricted content. For accessing publicly accessible content, the Google API is a lot easier. All you need is an URL and an API key.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://console.developers.google.com&#34;&gt;https://console.developers.google.com&lt;/a&gt; and create a new project. Select &lt;code&gt;credentials&lt;/code&gt; and create an &lt;em&gt;API Key&lt;/em&gt;.  You can restrict the use of the key although you don&amp;rsquo;t have to. Copy the API key value somewhere: we&amp;rsquo;ll need it in our code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create computed fields in Drupal 8.</title>
      <link>/posts/computed-fields-drupal-8/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/computed-fields-drupal-8/</guid>
      <description>&lt;p&gt;&lt;em&gt;I have updated this post as a result of &lt;a href=&#34;https://www.drupal.org/project/drupal/issues/2392845&#34;&gt;the issue (https://www.drupal.org/project/drupal/issues/2392845)&lt;/a&gt; that added the  &lt;code&gt;ComputedItemListTrait&lt;/code&gt; trait to core.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Drupal 8 we have on the one hand field types with some computed &lt;strong&gt;field properties&lt;/strong&gt;, and on the other hand fields that are fully computed.&lt;/p&gt;

&lt;p&gt;Computed field properties are quite common in Drupal 8. An example is the &lt;code&gt;TextItem&lt;/code&gt; field type. The properties &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;format&lt;/code&gt; are stored in the database, but a third property called &lt;code&gt;processed&lt;/code&gt; is computed on the fly using the &lt;code&gt;value&lt;/code&gt; and the &lt;code&gt;format&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to fully computed field items, there are less examples in core. It seems that in Drupal 8.5 the only fully computed field is the &lt;code&gt;moderation_state&lt;/code&gt; field, provided by the Content Moderation module. The field is added to all entities that add a moderation workflow.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;ComputedItemListTrait&lt;/code&gt; was added in &lt;a href=&#34;https://www.drupal.org/project/drupal/issues/2392845&#34;&gt;this issue&lt;/a&gt;, however, adding a computed field has become A lot more straightforward than it seems.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo vs Drupal: Why I used Hugo for my Drupal portfolio website.</title>
      <link>/posts/hugo-vs-drupal/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/hugo-vs-drupal/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.drupal.org&#34;&gt;Drupal&lt;/a&gt; is a full-fledged CMS for secure and complex websites and applications and is adopted by many big companies and governments accross the globe. &lt;a href=&#34;https://www.gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; is a static site generator built in GoLang that is blazing fast and quickly gaining popularity. For this website about my Drupal work I decided to go for Hugo. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>