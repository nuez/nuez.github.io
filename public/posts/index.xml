<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hi, I am Teun</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Hi, I am Teun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to build a super simple availability calendar.</title>
      <link>/posts/calendar-for-freelancers/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/calendar-for-freelancers/</guid>
      <description>&lt;p&gt;As a freelancer I like my (potential) clients to be aware of my availability, so we both don&amp;rsquo;t waste our time. To make the calendar as hassle-free as possible I wanted integrate it with Google Calendar, so all it would take is to fill in my availability there.&lt;/p&gt;

&lt;p&gt;All I need is a simple view of a calendar, without details of each event: just whether or not I am available for work. I figured that the good ol&amp;rsquo; jQuery Datepicker would do just fine.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s what I did.&lt;/p&gt;

&lt;h3 id=&#34;1-get-an-api-key&#34;&gt;1. Get an API Key.&lt;/h3&gt;

&lt;p&gt;Although most of the documentation you find online about authenticating for Google APIs is about OAUTH2 and complicated authentication flows, authenticating for publicly accessible Google content is really simple: all you need is an API key.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://console.developers.google.com&#34;&gt;https://console.developers.google.com&lt;/a&gt; and create a new project. Select &lt;code&gt;credentials&lt;/code&gt; and create an &lt;em&gt;API Key&lt;/em&gt;.  You can restrict the use of the key although you don&amp;rsquo;t have to. Copy the API key value somewhere: we&amp;rsquo;ll need it in our code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create computed fields in Drupal 8.</title>
      <link>/posts/computed-fields-drupal-8/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/computed-fields-drupal-8/</guid>
      <description>In Drupal 8 we can distinguish between field types that have some computed properties and on the other hand fields that are fully computed.
The former is quite common in Drupal 8: several field type definitions have computed properties alongside other properties that are stored in the database. For example the TextItem field type stores the value and the format in the database, but a third property processed is computed on the fly: it parses the raw text value using a format resulting in the processed value.</description>
    </item>
    
    <item>
      <title>Hugo vs Drupal: Why I used Hugo for my Drupal portfolio website.</title>
      <link>/posts/hugo-vs-drupal/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/hugo-vs-drupal/</guid>
      <description>Drupal is a full-fledged CMS for secure and complex websites and applications and is adopted by many big companies and governments accross the globe. Hugo is a static site generator built in GoLang that is blazing fast and quickly gaining popularity. For this website about my Drupal work I decided to go for Hugo. Here&amp;rsquo;s why.
When I started building my new portfolio website, I decided to look further than Drupal to build it.</description>
    </item>
    
  </channel>
</rss>