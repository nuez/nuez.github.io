<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drupal on Hi, I am Teun [nuez]</title>
    <link>/tags/drupal/</link>
    <description>Recent content in Drupal on Hi, I am Teun [nuez]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/drupal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to unit test methods that create and return entities in Drupal.</title>
      <link>/posts/how-to-unit-test-methods-that-create-and-return-drupal-entities/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-to-unit-test-methods-that-create-and-return-drupal-entities/</guid>
      <description>&lt;p&gt;Recently I tried to create a Unit test for a Drupal service that creates and returns entities. &lt;strong&gt;In my test I wanted to check if the field values that were used for creating those entities were matching my assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Drupal , the static &lt;code&gt;::create&lt;/code&gt; method of any content entity returns the created entity. In my unit test, checking the returned entity for values would be a hassle, as I would have to mock and stub my way through all the services that it relies on to fetch those values. More useful would be to mock the entity and let the &lt;code&gt;::create()&lt;/code&gt; method return the values that were just passed as arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Â¿Does that make any sense?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me try and explain:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create computed fields in Drupal 8.</title>
      <link>/posts/computed-fields-drupal-8/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/computed-fields-drupal-8/</guid>
      <description>&lt;p&gt;&lt;em&gt;I have updated this post as a result of &lt;a href=&#34;https://www.drupal.org/project/drupal/issues/2392845&#34;&gt;the issue (https://www.drupal.org/project/drupal/issues/2392845)&lt;/a&gt; that added the  &lt;code&gt;ComputedItemListTrait&lt;/code&gt; trait to core.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Drupal 8 we have on the one hand field types with some computed &lt;strong&gt;field properties&lt;/strong&gt;, and on the other hand fields that are fully computed.&lt;/p&gt;

&lt;p&gt;Computed field properties are quite common in Drupal 8. An example is the &lt;code&gt;TextItem&lt;/code&gt; field type. The properties &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;format&lt;/code&gt; are stored in the database, but a third property called &lt;code&gt;processed&lt;/code&gt; is computed on the fly using the &lt;code&gt;value&lt;/code&gt; and the &lt;code&gt;format&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to fully computed field items, there are less examples in core. It seems that in Drupal 8.5 the only fully computed field is the &lt;code&gt;moderation_state&lt;/code&gt; field, provided by the Content Moderation module. The field is added to all entities that add a moderation workflow.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;ComputedItemListTrait&lt;/code&gt; was added in &lt;a href=&#34;https://www.drupal.org/project/drupal/issues/2392845&#34;&gt;this issue&lt;/a&gt;, however, adding a computed field has become A lot more straightforward than it seems.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo vs Drupal: Why I used Hugo for my Drupal portfolio website.</title>
      <link>/posts/hugo-vs-drupal/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/hugo-vs-drupal/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.drupal.org&#34;&gt;Drupal&lt;/a&gt; is a full-fledged CMS for secure and complex websites and applications and is adopted by many big companies and governments accross the globe. &lt;a href=&#34;https://www.gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; is a static site generator built in GoLang that is blazing fast and quickly gaining popularity. For this website about my Drupal work I decided to go for Hugo. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Saving configuration to a content entity.</title>
      <link>/posts/saving-configuration-to-a-content-entity/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/saving-configuration-to-a-content-entity/</guid>
      <description>&lt;p&gt;In one of my projects I wanted to save configuration (coming from a plugin) to &lt;strong&gt;content entities&lt;/strong&gt;. In Drupal however, configuration is saved to &lt;strong&gt;configuration entities&lt;/strong&gt; (or &lt;strong&gt;configuration objects&lt;/strong&gt;) and managed using the very solid configuration management tools.&lt;/p&gt;

&lt;p&gt;If Drupal provides solid solutions for configuration, maybe the problem I was trying to solve was an &lt;strong&gt;&lt;em&gt;&lt;a href=&#34;http://xyproblem.info/&#34;&gt;XY problem&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;? Was I trying to find the answer to the wrong question? Even the &lt;a href=&#34;https://www.drupal.org/docs/8/configuration-management&#34;&gt;documentation on configuration management&lt;/a&gt; suggested content had nothing to do with configuration:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Configuration is the collection of admin settings that determine how the site functions, &lt;strong&gt;as opposed to the content of the site.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, I discovered that several contrib modules have come across the same need to &lt;strong&gt;save configuration to&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;content entities&lt;/em&gt;&lt;/strong&gt; and have solved this problem in different ways.&lt;/p&gt;

&lt;p&gt;For example, the &lt;a href=&#34;https://www.drupal.org/project/viewsreference&#34;&gt;Views Reference&lt;/a&gt; module saves configuration for rendering a View to a serialized &lt;code&gt;string&lt;/code&gt; that is part of a custom Field Type. Other modules provide generic solutions that you could easily implement in your own module: the &lt;a href=&#34;https://www.drupal.org/project/plugin&#34;&gt;Plugin&lt;/a&gt; module and &lt;a href=&#34;https://www.drupal.org/project/commerce&#34;&gt;Commerce&lt;/a&gt; come up with an agnostic field type for saving plugin configuration of any type.&lt;/p&gt;

&lt;p&gt;In this post I will try to explain how this works using an example module.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>